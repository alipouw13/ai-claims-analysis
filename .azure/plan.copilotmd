# Azure Deployment Plan for ai-claims-analysis-backend Project

## **Goal**
Deploy the AI Claims Analysis backend - a comprehensive FastAPI application with multi-agent orchestration capabilities, Azure OpenAI integration, and insurance/banking domain-specific Q&A processing to Azure Container Apps using Azure Developer CLI (AZD).

## **Project Information**

**AppName**: ai-claims-analysis-backend
- **Technology Stack**: FastAPI Python 3.11 application with Azure OpenAI, Azure Search, and Azure AI Foundry integration
- **Application Type**: AI-powered claims analysis system with multi-agent orchestration for banking and insurance domains
- **Key Features**:
  - Multi-domain Q&A system (Banking: `/qa/ask`, Insurance: `/qa/insurance/ask`)
  - Azure OpenAI GPT-4/GPT-5 model integration with fallback mechanisms
  - Azure Search with multiple indexes (`rag-sec`, `policy-documents`, `claims-documents`)
  - Azure AI Foundry agent orchestration
  - Document processing with Azure Document Intelligence
  - Session management with Azure Cosmos DB
- **Containerization**: Ready for deployment with existing Dockerfile
- **Dependencies**: Azure OpenAI, Azure Search, Azure AI Foundry, Azure Cosmos DB, Azure Document Intelligence, Azure Key Vault
- **Hosting Recommendation**: Azure Container Apps for scalable, serverless container hosting with managed identity integration

## **Azure Resources Architecture**

> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    subgraph "Container Apps Environment"
        CA[Container App<br/>ai-claims-analysis-backend]
    end
    
    subgraph "AI Services"
        AOI[Azure OpenAI<br/>GPT-4/GPT-5 Models]
        AIF[Azure AI Foundry<br/>Agent Orchestration]
        DI[Document Intelligence<br/>Document Processing]
    end
    
    subgraph "Data Services"
        AS[Azure Search<br/>Multiple Indexes]
        CD[Cosmos DB<br/>Session Management]
    end
    
    subgraph "Security & Monitoring"
        KV[Key Vault<br/>Secrets Management]
        AI[Application Insights<br/>Monitoring]
        LA[Log Analytics<br/>Workspace]
    end
    
    subgraph "Container Infrastructure"
        ACR[Container Registry<br/>Image Storage]
        MI[Managed Identity<br/>Authentication]
    end
    
    CA --> AOI
    CA --> AIF
    CA --> AS
    CA --> CD
    CA --> DI
    CA --> KV
    CA --> AI
    ACR --> CA
    MI --> CA
    AI --> LA
    MI --> AOI
    MI --> AS
    MI --> CD
    MI --> KV
```

**Data Flow Architecture:**
- The container app pulls its image from Azure Container Registry using managed identity
- Users submit Q&A requests through FastAPI endpoints (`/qa/ask` for banking, `/qa/insurance/ask` for insurance)
- The application routes requests through domain-specific orchestrators (MultiAgentOrchestrator for banking, SemanticKernelInsuranceOrchestrator for insurance)
- Knowledge base managers search appropriate Azure Search indexes (`rag-sec` for banking, `policy-documents`/`claims-documents` for insurance)
- Azure OpenAI provides language model inference with GPT-4/GPT-5 models
- Azure AI Foundry manages agent orchestration and evaluation frameworks
- Azure Cosmos DB stores conversation sessions and evaluation results
- Document Intelligence processes and extracts content from financial documents
- Key Vault securely stores API keys and connection strings
- Application Insights and Log Analytics provide comprehensive monitoring and observability

## **Recommended Azure Resources**

**Recommended App service hosting the project**
- Application: ai-claims-analysis-backend
  - Hosting Service Type: Azure Container Apps
  - SKU: Consumption-based with auto-scaling (1-10 replicas, 1.0 CPU, 2Gi memory)
  - Configuration:
    - Language: Python 3.11
    - dockerFilePath: ./backend/Dockerfile
    - dockerContext: ./backend
    - Environment Variables:
      - AZURE_OPENAI_ENDPOINT
      - AZURE_OPENAI_API_VERSION
      - AZURE_SEARCH_SERVICE_NAME
      - AZURE_SEARCH_INDEX_NAME
      - AZURE_AI_PROJECT_ENDPOINT
      - AZURE_COSMOS_ENDPOINT
      - AZURE_FORM_RECOGNIZER_ENDPOINT
      - AZURE_KEY_VAULT_URL
      - AZURE_CLIENT_ID
      - AZURE_TENANT_ID
      - ENVIRONMENT=production
  - Dependencies Resources:
    - **Azure OpenAI Service**
      - SKU: Standard S0
      - Service Type: Cognitive Services - OpenAI
      - Connection Type: Managed Identity + API Key (from Key Vault)
      - Models: GPT-4, GPT-4-turbo, GPT-35-turbo, text-embedding-ada-002, text-embedding-3-small, text-embedding-3-large
      - Environment Variables: AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_API_VERSION
    
    - **Azure AI Search**
      - SKU: Standard S1 (1 replica, 1 partition)
      - Service Type: Azure Cognitive Search
      - Connection Type: Managed Identity + API Key (from Key Vault)
      - Indexes: rag-sec, policy-documents, claims-documents
      - Environment Variables: AZURE_SEARCH_SERVICE_NAME, AZURE_SEARCH_INDEX_NAME
    
    - **Azure AI Foundry**
      - SKU: Standard
      - Service Type: Azure AI Foundry Project
      - Connection Type: Managed Identity
      - Features: Agent orchestration, evaluation framework, observability
      - Environment Variables: AZURE_AI_PROJECT_ENDPOINT, AZURE_AI_PROJECT_NAME
    
    - **Azure Cosmos DB**
      - SKU: Standard (Serverless)
      - Service Type: Azure Cosmos DB for NoSQL
      - Connection Type: Managed Identity + Connection String (from Key Vault)
      - Containers: chat-sessions, evaluation-results, document-metadata, user-feedback
      - Environment Variables: AZURE_COSMOS_ENDPOINT
    
    - **Azure Document Intelligence**
      - SKU: Standard S0
      - Service Type: Azure Document Intelligence
      - Connection Type: Managed Identity + API Key (from Key Vault)
      - Features: Layout analysis, table extraction, financial document analysis
      - Environment Variables: AZURE_FORM_RECOGNIZER_ENDPOINT

**Recommended Supporting Services**
- **Application Insights**: Web application monitoring with custom metrics for token usage and agent performance
- **Log Analytics Workspace**: Centralized logging for all services with 30-day retention
- **Key Vault**: Secure storage for API keys, connection strings, and sensitive configuration
- **Container Registry**: Private registry for container image storage and management

**Recommended Security Configurations**
- **User Managed Identity**: Assigned to the container app for secure Azure service authentication
- **RBAC Assignments**:
  - AcrPull role assignment: Managed identity to Container Registry
  - Cognitive Services OpenAI User: Managed identity to Azure OpenAI
  - Search Index Data Contributor: Managed identity to Azure Search
  - Cosmos DB Built-in Data Contributor: Managed identity to Cosmos DB
  - Key Vault Secrets User: Managed identity to Key Vault
  - Document Intelligence User: Managed identity to Document Intelligence
- **Network Security**: Private endpoints for Cosmos DB, Key Vault, and Search Service
- **API Security**: JWT token validation and rate limiting

## **Execution Steps**

> **Below are the steps for Copilot to follow; ask Copilot to update or execute this plan.**

1. **Provision Azure Infrastructure And Deploy the Application:**
    1. Based on the required Azure resources in this plan, get the IaC rules from the `iac-rules-get` tool
    2. Generate IaC (Bicep files) for required Azure resources based on the plan:
       - main.bicep (entry point)
       - modules/containerApp.bicep
       - modules/openai.bicep
       - modules/search.bicep
       - modules/aiFoundry.bicep
       - modules/cosmosdb.bicep
       - modules/documentIntelligence.bicep
       - modules/keyVault.bicep
       - modules/monitoring.bicep
       - modules/security.bicep
    3. Create azure.yaml file for AZD configuration
    4. Pre-check: use `get_errors` tool to check generated Bicep grammar errors and fix any issues
    5. Run the AZD command `azd up` to provision resources and confirm each resource is created
    6. Check the deployment output to ensure all resources are provisioned successfully
    7. Verify container app deployment and check application logs with `azd-app-log-get` tool

2. **Post-Deployment Configuration:**
    1. Configure Azure Search indexes (rag-sec, policy-documents, claims-documents)
    2. Deploy Azure OpenAI models (GPT-4, GPT-4-turbo, text-embedding models)
    3. Set up Azure AI Foundry project and agent configurations
    4. Initialize Cosmos DB containers and database structure
    5. Validate all service connections and managed identity permissions

3. **Testing and Validation:**
    1. Test banking Q&A endpoint: `/qa/ask`
    2. Test insurance Q&A endpoint: `/qa/insurance/ask`
    3. Verify multi-agent orchestration functionality
    4. Validate Azure Search integration across all indexes
    5. Test document processing pipeline
    6. Confirm monitoring and logging functionality

4. **Summary:**
    1. Summarize the deployment result and save to '.azure/summary.copilotmd'
    2. List all deployment files with brief descriptions
    3. Create a diagram showing all provisioned Azure resources
    4. Document environment variables and connection configurations
    5. Provide troubleshooting guide for common issues